from typing_extensions import final
@final
class alsreceiver():
	@property
	def version(self) -> str: ...

	@property
	def connect(self, address:str, port:str) -> bool: ...

	@property
	def receive(self, unused:int) -> int: ...

	@property
	def receive_get(self, unused:int) -> int | None: ...

	@property
	def start_receive(self) -> bool: ...

	@property
	def pause_receive(self, pause:bool, reconnect:bool=False) -> bool: ...

	@property
	def stop_receive(self, wait:bool=True) -> bool: ...

	@property
	def get_threaded_data(self) -> memoryview | None: ...

	@property
	def get_thread_stats(self) -> str: ...

	@property
	def free(self, view:memoryview) -> bool: ...

	@property
	def set_timeouts(self, connect:float, receive:float, receive_frag:float, send:float) -> bool: ...

	@property
	def disconnect(self): ...

	@property
	def send(self, data:memoryview | bytes) -> bool: ...